@using Vmodels
@model List<  Vmodels. BundelsViewModel>
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    Layout = "_Layout";
    ViewData["Title"] = "Pakage details ";
}

<h2>@ViewData["Title"]</h2>
<!-- Add the search input form -->
<br />
<br />
<partial name="_AlertMessage" model="Model" />
 


@if (!Model.Any())
{
    <div class="alert alert-warning mt-5">
        <h4 class="alert-heading">No games!</h4>
        <p class="mb-0">No games were added yet.</p>
    </div>
}
else
{
    <div id="search-results">


        <div id="search-results">
            <table class="table bg-primary table-hover">
                <thead>
                    <tr>
                        <th>PackgeName</th>
                        <th>CatagoryName</th>
                        <th>ProductName</th>
                        <th>productDiscount</th>
                        <th>Description</th>
                     </tr>
                </thead>
                <tbody id="patientTableBody">
                    @foreach (var product in Model)
                    {
                        <tr>
                            <td>@product.PackgeName</td>
                            <td>@product.CatagoryName</td>
                            <td>@product.ProductName</td>
                            <td>@product.productDiscount</td>
                            <td>@product.Description</td>
                            <td>

                        
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

 
}

@section Scripts {
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script>


        // Get the search input element
        const searchInput = document.getElementById('search-input');

        // Get the patient rows
        const patientRows = document.querySelectorAll('.patient');

        // Function to update the search results
        function updateSearchResults() {
            const searchText = searchInput.value.toLowerCase();

            patientRows.forEach(patientRow => {
                const patientText = patientRow.textContent.toLowerCase();
                if (patientText.includes(searchText)) {
                    patientRow.style.display = 'table-row';
                } else {
                    patientRow.style.display = 'none';
                }
            });
        }

        // Add an event listener to the search input to listen for input changes
        searchInput.addEventListener('input', function () {
            updateSearchResults();
        });

        // Initial call to populate search results
        updateSearchResults();

    </script>
}

